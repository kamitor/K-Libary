/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);

// src/Ollama.ts
var import_obsidian3 = require("obsidian");

// src/OllamaSettingTab.ts
var import_obsidian = require("obsidian");
var OllamaSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("LlamaIndex Connector URL").setDesc("URL of the python server for indexing and query (e.g. http://localhost:5000)").addText(
      (text) => text.setPlaceholder("http://localhost:5000").setValue(this.plugin.settings.llamaIndexUrl).onChange(async (value) => {
        this.plugin.settings.llamaIndexUrl = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Success notifications (noisy)").setDesc("If enabled you will get a notification for successful reindexing. If disabled only errors are displayed.").addToggle(
      (value) => value.setValue(this.plugin.settings.allowSuccessNotifications).onChange(async (value2) => {
        this.plugin.settings.allowSuccessNotifications = value2;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/data/defaultSettings.ts
var DEFAULT_SETTINGS = {
  llamaIndexUrl: "http://localhost:5000",
  allowSuccessNotifications: false
};

// src/modal/ChatModal.ts
var import_obsidian2 = require("obsidian");
var ChatModal = class extends import_obsidian2.Modal {
  constructor(app, baseUrl) {
    super(app);
    this.baseUrl = baseUrl;
    this.onClickHandler = this.onClickHandler.bind(this);
    this.isLoading = false;
  }
  onClickHandler() {
    if (this.isLoading)
      return;
    this.isLoading = true;
    this.responseContainer.empty();
    this.responseContainer.createDiv({ cls: "loader" });
    this.input.disabled = true;
    const view = this.app.workspace.getActiveViewOfType(
      import_obsidian2.MarkdownView
    );
    (0, import_obsidian2.requestUrl)({
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      url: `${this.baseUrl}/`,
      body: JSON.stringify({
        query: this.input.value.trim()
      })
    }).then((response) => {
      this.responseContainer.empty();
      import_obsidian2.MarkdownRenderer.render(this.app, response.text, this.responseContainer, "/", view);
      this.input.value = "";
    }).catch((error) => {
      new import_obsidian2.Notice(`Error while indexing the store ${error}`);
    }).finally(() => {
      this.isLoading = false;
      this.input.disabled = false;
      this.input.focus();
    });
  }
  async onOpen() {
    const container = this.contentEl;
    container.addClass("chatModal");
    container.createEl("h1", { text: "Ollama AI Chat" });
    const wrapper = container.createDiv({ cls: "chatModal__wrapper" });
    this.responseContainer = wrapper.createDiv();
    const inputContainer = wrapper.createEl("div");
    this.input = inputContainer.createEl("input", { placeholder: "Your question my Lord?" });
    this.input.addEventListener("keypress", (e) => {
      e.key === "Enter" && this.onClickHandler();
    });
    const button = inputContainer.createEl("button", { text: "Submit" });
    button.addEventListener("click", this.onClickHandler);
  }
  async onClose() {
  }
};

// src/Ollama.ts
var Ollama = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    if (await this.healthcheck()) {
      this.runStartupIndexing();
      this.registerEvents();
      this.addPromptCommands();
      this.addSettingTab(new OllamaSettingTab(this.app, this));
    } else {
      new import_obsidian3.Notice(`The ${this.settings.llamaIndexUrl} is unreachable or not healthy. Skipping initialization.`);
    }
  }
  registerEvents() {
    this.app.workspace.onLayoutReady(() => {
      this.registerEvent(this.app.vault.on("create", this.createEvent.bind(this)));
      this.registerEvent(this.app.vault.on("delete", this.deleteEvent.bind(this)));
      this.registerEvent(this.app.vault.on("modify", this.modifyEvent.bind(this)));
      this.registerEvent(this.app.vault.on("rename", this.renameEvent.bind(this)));
    });
  }
  addPromptCommands() {
    this.addCommand({
      id: "ask-your-ai",
      name: "AI Chat",
      callback: () => {
        new ChatModal(this.app, this.settings.llamaIndexUrl).open();
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async requestIndexing(method, filePath) {
    try {
      const response = await (0, import_obsidian3.requestUrl)({
        method,
        headers: {
          "Content-Type": "application/json"
        },
        url: `${this.settings.llamaIndexUrl}/indexing`,
        body: JSON.stringify({
          path: filePath
        })
      });
      if (response.status !== 200) {
        throw Error(response.text);
      }
      if (this.settings.allowSuccessNotifications)
        new import_obsidian3.Notice(`Ollama indexing: ${response.text}`);
      return true;
    } catch (error) {
      new import_obsidian3.Notice(`Error while indexing the store ${error}`);
      return false;
    }
    ;
  }
  async healthcheck() {
    return await this.requestIndexing("GET");
  }
  async runStartupIndexing() {
    this.requestIndexing("POST", "");
  }
  async createEvent(file) {
    if (file instanceof import_obsidian3.TFolder) {
      return;
    }
    this.requestIndexing("PATCH", file.path);
  }
  async deleteEvent(file) {
    this.requestIndexing("DELETE", file.path);
  }
  async modifyEvent(file) {
    this.requestIndexing("PATCH", file.path);
  }
  async renameEvent(file, oldPath) {
    this.requestIndexing("PATCH", file.path);
    this.requestIndexing("DELETE", oldPath);
  }
};

// src/main.ts
var main_default = Ollama;
